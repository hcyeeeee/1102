{"remainingRequest":"/Users/peichin/Desktop/1102/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/peichin/Desktop/1102/src/components/city.vue?vue&type=template&id=e272e7fe&scoped=true&","dependencies":[{"path":"/Users/peichin/Desktop/1102/src/components/city.vue","mtime":1667720647599},{"path":"/Users/peichin/Desktop/1102/node_modules/cache-loader/dist/cjs.js","mtime":1665756017000},{"path":"/Users/peichin/Desktop/1102/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1665756021000},{"path":"/Users/peichin/Desktop/1102/node_modules/cache-loader/dist/cjs.js","mtime":1665756017000},{"path":"/Users/peichin/Desktop/1102/node_modules/vue-loader/lib/index.js","mtime":1665756021000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}